{"version":3,"sources":["Header.js","Switch.js","Display.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Switch","props","type","checked","isChecked","onChange","handleChange","defaultProps","Display","currentTime","currentDate","Clock","state","refreshTime","date","Date","_this","setState","toLocaleTimeString","toDateString","timeInterval","setInterval","_this$state","this","src_Switch_0","src_Display_0","Component","App","src_Header_0","src_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAceA,eAXA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAAf,uDCJVC,SAAS,SAACC,GAAD,OACXL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWC,QAASF,EAAMG,UAAWC,SAAUJ,EAAMK,eACjEV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAEpBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mCAM7BC,EAAOO,aAAe,CAClBH,WAAY,GAQDJ,QCvBTQ,SAAU,SAACP,GAAD,OACZL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,IAAoCE,EAAMQ,YAA1C,KAEQR,EAAMG,UAENR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,IAAoCE,EAAMS,YAA1C,KAEA,SAMpBF,EAAQD,aAAe,CACnBE,YAAc,WACdC,YAAc,kBACdN,WAAY,GASDI,QCMAG,6MAhCXC,MAAQ,CACJH,YAAc,WACdC,YAAc,kBACdN,WAAY,KAGhBS,YAAa,WACT,IAAIC,EAAO,IAAIC,KACfC,EAAKC,SAAS,CACVR,YAAcK,EAAKI,qBACnBR,YAAcI,EAAKK,oBAI3Bb,aAAe,WACXU,EAAKC,SAAS,CAAEb,WAAaY,EAAKJ,MAAMR,eAG5CgB,aAAeC,YAAYL,EAAKH,YAAY,6EAEpC,IAAAS,EACuCC,KAAKX,MAA1CH,EADFa,EACEb,YAAYC,EADdY,EACcZ,YAAYN,EAD1BkB,EAC0BlB,UAE9B,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0B,EAAD,CAAQpB,UAAWA,EAAWE,aAAciB,KAAKjB,eACjDV,EAAAC,EAAAC,cAAC2B,EAAD,CAAShB,YAAaA,EAAaC,YAAaA,EAAaN,UAAWA,YA3BpEsB,aCSLC,SAPH,kBACV/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,SCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7070c00e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n    <nav className=\"header navbar navbar-dark bg-dark\">\r\n        <div className=\"container\">\r\n            <div className=\"row m-auto\">\r\n                <i className=\"fa fa fa-clock-o fa-4x text-white\"></i>\r\n                <div className=\"h1 ml-3 my-auto text-light\">React Clock</div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Switch.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Switch = (props) => (\r\n    <div className=\"container\">\r\n        <div className=\"d-flex mx-auto\">\r\n            <div className=\"row m-auto\">\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" checked={props.isChecked} onChange={props.handleChange} />\r\n                    <span className=\"slider round\"></span>\r\n                </label>\r\n                <i className=\"fa fa-calendar ml-2 fa-2x\"></i>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nSwitch.defaultProps = {\r\n    isChecked : true\r\n}\r\n\r\nSwitch.propTypes = {\r\n    isChecked : PropTypes.bool,\r\n    handleChange : PropTypes.func\r\n}\r\n\r\nexport default Switch;","import React from 'react';\r\nimport './Display.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Display = (props) => (\r\n    <div className=\"circle mx-auto mt-5\">\r\n        <div>\r\n            <div className=\"time text-center\"> {props.currentTime} </div>\r\n                {\r\n                    props.isChecked \r\n                    ?\r\n                    <div className=\"date text-center\"> {props.currentDate} </div> \r\n                    :\r\n                    null\r\n                }\r\n        </div>\r\n    </div>\r\n) \r\n\r\nDisplay.defaultProps = {\r\n    currentTime : '__:__:__',\r\n    currentDate : '___ ___ __ ____',\r\n    isChecked : true\r\n}\r\n\r\nDisplay.propTypes = {\r\n    currentTime : PropTypes.string,\r\n    currentDate : PropTypes.string,\r\n    isChecked : PropTypes.bool\r\n}\r\n    \r\nexport default Display;","import React,{Component} from 'react';\r\nimport Switch from './Switch';\r\nimport Display from './Display';\r\n\r\nclass Clock extends Component{\r\n    state = {\r\n        currentTime : '__:__:__',\r\n        currentDate : '___ ___ __ ____',\r\n        isChecked : true\r\n    }\r\n\r\n    refreshTime= () => {\r\n        var date = new Date();\r\n        this.setState({\r\n            currentTime : date.toLocaleTimeString(),\r\n            currentDate : date.toDateString()\r\n        });\r\n    }\r\n\r\n    handleChange = () => {\r\n        this.setState({ isChecked : !this.state.isChecked})\r\n    }\r\n\r\n    timeInterval = setInterval(this.refreshTime,1000);\r\n\r\n    render(){\r\n        const{currentTime,currentDate,isChecked} = this.state;\r\n\r\n        return(\r\n            <div>\r\n                <Switch isChecked={isChecked} handleChange={this.handleChange} />\r\n                <Display currentTime={currentTime} currentDate={currentDate} isChecked={isChecked} />   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Clock from './Clock';\nimport './bootstrap.min.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Clock />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}